/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  DALottery,
  DALotteryInterface,
} from "../../Lottery.sol/DALottery";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash_rnd_number",
        type: "bytes32",
      },
    ],
    name: "buyTicket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositEther",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ticketIndex",
        type: "uint256",
      },
    ],
    name: "lotteryCalculator",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "c",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tier",
        type: "uint256",
      },
    ],
    name: "ownTicket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ticket_no",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rnd_number",
        type: "uint256",
      },
    ],
    name: "revealRndNumber",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startLotteryRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "c",
        type: "uint256",
      },
    ],
    name: "threeNumbersHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tier",
        type: "uint256",
      },
    ],
    name: "tierSelector",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506115a6806100206000396000f3fe60806040526004361061007b5760003560e01c8063ea3386951161004e578063ea33869514610117578063eda95fb41461012e578063f1b83cb11461016b578063f1bb43c9146101a85761007b565b80631e7db4661461008057806326839f17146100a95780639eb76341146100c5578063e5423274146100ee575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a291906110de565b6101e5565b005b6100c360048036038101906100be9190611145565b61046f565b005b3480156100d157600080fd5b506100ec60048036038101906100e79190611172565b610484565b005b3480156100fa57600080fd5b50610115600480360381019061011091906111e8565b61080f565b005b34801561012357600080fd5b5061012c610bfe565b005b34801561013a57600080fd5b5061015560048036038101906101509190611145565b610c56565b6040516101629190611224565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d9190611145565b610d0f565b60405161019f9190611224565b60405180910390f35b3480156101b457600080fd5b506101cf60048036038101906101ca919061123f565b610d4e565b6040516101dc91906112a1565b60405180910390f35b60006101f2858585610d4e565b90506101fd8161080f565b600080600090505b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156103315782600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106102a1576102a06112bc565b5b90600052602060002090600a0201600201540361031e57600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110610309576103086112bc565b5b90600052602060002090600a02016007015491505b80806103299061131a565b915050610205565b5085600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610384576103836112bc565b5b90600052602060002090600a02016005018190555084600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106103eb576103ea6112bc565b5b90600052602060002090600a02016006018190555082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610452576104516112bc565b5b90600052602060002090600a020160040181905550505050505050565b61047834610dc0565b61048181610dc0565b50565b600080600090505b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156105b85783600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610528576105276112bc565b5b90600052602060002090600a020160000154036105a557600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481106105905761058f6112bc565b5b90600052602060002090600a02016007015491505b80806105b09061131a565b91505061048c565b506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061060c5761060b6112bc565b5b90600052602060002090600a02016005015490506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110610673576106726112bc565b5b90600052602060002090600a02016006015490506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481106106da576106d96112bc565b5b90600052602060002090600a0201600201549050600083838760405160200161070593929190611383565b6040516020818303038152906040528051906020012090508082036108065760018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208681548110610776576107756112bc565b5b90600052602060002090600a020160080160006101000a81548160ff02191690831515021790555085600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002086815481106107f0576107ef6112bc565b5b90600052602060002090600a0201600901819055505b50505050505050565b60016003600082825461082291906113c0565b92505081905550600060019050600060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905061087f91906113c0565b9050600354600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106108d5576108d46112bc565b5b90600052602060002090600a02016000018190555082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061093c5761093b6112bc565b5b90600052602060002090600a02016002018190555042600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106109a3576109a26112bc565b5b90600052602060002090600a02016003018190555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610a0a57610a096112bc565b5b90600052602060002090600a020160070181905550610a2881610c56565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610a7957610a786112bc565b5b90600052602060002090600a0201600101819055506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610b2057610b1f6112bc565b5b90600052602060002090600a0201600001549080600181540180825580915050600190039060005260206000200160009091909190915055600260006004548152602001908152602001600020600201600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610bc157610bc06112bc565b5b90600052602060002090600a0201600001549080600181540180825580915050600190039060005260206000200160009091909190915055505050565b600160046000828254610c1191906113c0565b92505081905550600454600260006004548152602001908152602001600020600001819055504260026000600454815260200190815260200160002060010181905550565b600080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110610caa57610ca96112bc565b5b90600052602060002090600a0201600301549050600060026000600181526020019081526020016000206001015490506000600162093a808385610cee91906113f4565b610cf89190611457565b610d0291906113c0565b9050809350505050919050565b600060018203610d225760019050610d49565b60028203610d335760029050610d49565b60038203610d445760039050610d49565b600090505b919050565b600080610d5a85610e59565b610d6385610e59565b610d6c85610e59565b604051602001610d7e939291906114f9565b604051602081830303815290604052905080604051602001610da0919061152a565b604051602081830303815290604052805190602001209150509392505050565b610e5681604051602401610dd49190611224565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610f27565b50565b606060006001610e6884610f50565b01905060008167ffffffffffffffff811115610e8757610e86611541565b5b6040519080825280601f01601f191660200182016040528015610eb95781602001600182028036833780820191505090505b509050600082602001820190505b600115610f1c578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610f1057610f0f611428565b5b04945060008503610ec7575b819350505050919050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610fae577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610fa457610fa3611428565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610feb576d04ee2d6d415b85acef81000000008381610fe157610fe0611428565b5b0492506020810190505b662386f26fc10000831061101a57662386f26fc1000083816110105761100f611428565b5b0492506010810190505b6305f5e1008310611043576305f5e100838161103957611038611428565b5b0492506008810190505b612710831061106857612710838161105e5761105d611428565b5b0492506004810190505b6064831061108b576064838161108157611080611428565b5b0492506002810190505b600a831061109a576001810190505b80915050919050565b600080fd5b6000819050919050565b6110bb816110a8565b81146110c657600080fd5b50565b6000813590506110d8816110b2565b92915050565b600080600080608085870312156110f8576110f76110a3565b5b6000611106878288016110c9565b9450506020611117878288016110c9565b9350506040611128878288016110c9565b9250506060611139878288016110c9565b91505092959194509250565b60006020828403121561115b5761115a6110a3565b5b6000611169848285016110c9565b91505092915050565b60008060408385031215611189576111886110a3565b5b6000611197858286016110c9565b92505060206111a8858286016110c9565b9150509250929050565b6000819050919050565b6111c5816111b2565b81146111d057600080fd5b50565b6000813590506111e2816111bc565b92915050565b6000602082840312156111fe576111fd6110a3565b5b600061120c848285016111d3565b91505092915050565b61121e816110a8565b82525050565b60006020820190506112396000830184611215565b92915050565b600080600060608486031215611258576112576110a3565b5b6000611266868287016110c9565b9350506020611277868287016110c9565b9250506040611288868287016110c9565b9150509250925092565b61129b816111b2565b82525050565b60006020820190506112b66000830184611292565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611325826110a8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611357576113566112eb565b5b600182019050919050565b6000819050919050565b61137d611378826110a8565b611362565b82525050565b600061138f828661136c565b60208201915061139f828561136c565b6020820191506113af828461136c565b602082019150819050949350505050565b60006113cb826110a8565b91506113d6836110a8565b92508282019050808211156113ee576113ed6112eb565b5b92915050565b60006113ff826110a8565b915061140a836110a8565b9250828203905081811115611422576114216112eb565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611462826110a8565b915061146d836110a8565b92508261147d5761147c611428565b5b828204905092915050565b600081519050919050565b600081905092915050565b60005b838110156114bc5780820151818401526020810190506114a1565b60008484015250505050565b60006114d382611488565b6114dd8185611493565b93506114ed81856020860161149e565b80840191505092915050565b600061150582866114c8565b915061151182856114c8565b915061151d82846114c8565b9150819050949350505050565b600061153682846114c8565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220bfe86aaf07973d5c13a131bde7562630e14b9d0a18dd6409b8ab9f1c2731a53064736f6c63430008120033";

type DALotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DALotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DALottery__factory extends ContractFactory {
  constructor(...args: DALotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DALottery> {
    return super.deploy(overrides || {}) as Promise<DALottery>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DALottery {
    return super.attach(address) as DALottery;
  }
  override connect(signer: Signer): DALottery__factory {
    return super.connect(signer) as DALottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DALotteryInterface {
    return new utils.Interface(_abi) as DALotteryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DALottery {
    return new Contract(address, _abi, signerOrProvider) as DALottery;
  }
}
