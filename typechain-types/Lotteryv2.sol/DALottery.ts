/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace DALottery {
  export type LotteryInfoStruct = {
    lotteryNo: PromiseOrValue<BigNumberish>;
    startTimestamp: PromiseOrValue<BigNumberish>;
    winningTickets: PromiseOrValue<BigNumberish>[];
    ticketNosInLottery: PromiseOrValue<BigNumberish>[];
    lotteryBalance: PromiseOrValue<BigNumberish>;
  };

  export type LotteryInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[],
    BigNumber
  ] & {
    lotteryNo: BigNumber;
    startTimestamp: BigNumber;
    winningTickets: BigNumber[];
    ticketNosInLottery: BigNumber[];
    lotteryBalance: BigNumber;
  };
}

export interface DALotteryInterface extends utils.Interface {
  functions: {
    "balance(address)": FunctionFragment;
    "buyTicket(bytes32)": FunctionFragment;
    "decideWinningNumbers()": FunctionFragment;
    "depositEther(uint256)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getIthOwnedTicketNo(uint256,uint256)": FunctionFragment;
    "getLastOwnedTicketNo(uint256)": FunctionFragment;
    "getLottery(uint256)": FunctionFragment;
    "getLotteryNos(uint256)": FunctionFragment;
    "getTicket(uint256)": FunctionFragment;
    "lotteryStarter()": FunctionFragment;
    "makeTicketPayment(bytes32,uint256)": FunctionFragment;
    "revealRndNumber(uint256,uint256)": FunctionFragment;
    "setLotteryNo(uint256)": FunctionFragment;
    "withdrawEther(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balance"
      | "buyTicket"
      | "decideWinningNumbers"
      | "depositEther"
      | "getBalance"
      | "getIthOwnedTicketNo"
      | "getLastOwnedTicketNo"
      | "getLottery"
      | "getLotteryNos"
      | "getTicket"
      | "lotteryStarter"
      | "makeTicketPayment"
      | "revealRndNumber"
      | "setLotteryNo"
      | "withdrawEther"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "decideWinningNumbers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositEther",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIthOwnedTicketNo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastOwnedTicketNo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLottery",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteryNos",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicket",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryStarter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeTicketPayment",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revealRndNumber",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLotteryNo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decideWinningNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIthOwnedTicketNo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastOwnedTicketNo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLottery", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLotteryNos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lotteryStarter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeTicketPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealRndNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLotteryNo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;

  events: {
    "RandomNumber(bytes32)": EventFragment;
    "WeekNos(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RandomNumber"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WeekNos"): EventFragment;
}

export interface RandomNumberEventObject {
  hash: string;
}
export type RandomNumberEvent = TypedEvent<[string], RandomNumberEventObject>;

export type RandomNumberEventFilter = TypedEventFilter<RandomNumberEvent>;

export interface WeekNosEventObject {
  weekno1: BigNumber;
  weekno2: BigNumber;
}
export type WeekNosEvent = TypedEvent<
  [BigNumber, BigNumber],
  WeekNosEventObject
>;

export type WeekNosEventFilter = TypedEventFilter<WeekNosEvent>;

export interface DALottery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DALotteryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyTicket(
      hash_rnd_number: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decideWinningNumbers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIthOwnedTicketNo(
      i: PromiseOrValue<BigNumberish>,
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    getLastOwnedTicketNo(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    getLottery(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DALottery.LotteryInfoStructOutput]>;

    getLotteryNos(
      unixtimeinweek: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTicket(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    lotteryStarter(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeTicketPayment(
      hash_rand_number: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revealRndNumber(
      ticket_no: PromiseOrValue<BigNumberish>,
      random_number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLotteryNo(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balance(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyTicket(
    hash_rnd_number: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decideWinningNumbers(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositEther(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getIthOwnedTicketNo(
    i: PromiseOrValue<BigNumberish>,
    lottery_no: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number]>;

  getLastOwnedTicketNo(
    lottery_no: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number]>;

  getLottery(
    lottery_no: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DALottery.LotteryInfoStructOutput>;

  getLotteryNos(
    unixtimeinweek: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTicket(
    lottery_no: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  lotteryStarter(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeTicketPayment(
    hash_rand_number: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revealRndNumber(
    ticket_no: PromiseOrValue<BigNumberish>,
    random_number: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLotteryNo(
    lottery_no: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawEther(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTicket(
      hash_rnd_number: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    decideWinningNumbers(overrides?: CallOverrides): Promise<void>;

    depositEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getIthOwnedTicketNo(
      i: PromiseOrValue<BigNumberish>,
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    getLastOwnedTicketNo(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    getLottery(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DALottery.LotteryInfoStructOutput>;

    getLotteryNos(
      unixtimeinweek: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTicket(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    lotteryStarter(overrides?: CallOverrides): Promise<void>;

    makeTicketPayment(
      hash_rand_number: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revealRndNumber(
      ticket_no: PromiseOrValue<BigNumberish>,
      random_number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLotteryNo(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RandomNumber(bytes32)"(hash?: null): RandomNumberEventFilter;
    RandomNumber(hash?: null): RandomNumberEventFilter;

    "WeekNos(uint256,uint256)"(
      weekno1?: null,
      weekno2?: null
    ): WeekNosEventFilter;
    WeekNos(weekno1?: null, weekno2?: null): WeekNosEventFilter;
  };

  estimateGas: {
    balance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTicket(
      hash_rnd_number: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decideWinningNumbers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getIthOwnedTicketNo(
      i: PromiseOrValue<BigNumberish>,
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastOwnedTicketNo(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLottery(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLotteryNos(
      unixtimeinweek: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTicket(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lotteryStarter(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeTicketPayment(
      hash_rand_number: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revealRndNumber(
      ticket_no: PromiseOrValue<BigNumberish>,
      random_number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLotteryNo(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTicket(
      hash_rnd_number: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decideWinningNumbers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIthOwnedTicketNo(
      i: PromiseOrValue<BigNumberish>,
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastOwnedTicketNo(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLottery(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLotteryNos(
      unixtimeinweek: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTicket(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lotteryStarter(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeTicketPayment(
      hash_rand_number: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revealRndNumber(
      ticket_no: PromiseOrValue<BigNumberish>,
      random_number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLotteryNo(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
