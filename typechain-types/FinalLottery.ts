/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface FinalLotteryInterface extends utils.Interface {
  functions: {
    "balance(address)": FunctionFragment;
    "buyTicket(bytes32,int256)": FunctionFragment;
    "calculateSinglePriceValue(uint256,uint256)": FunctionFragment;
    "calculateTotalPriceValue(uint256)": FunctionFragment;
    "checkIfTicketWon(uint256,uint256)": FunctionFragment;
    "collectTicketPrize(uint256,uint256)": FunctionFragment;
    "collectTicketRefund(uint256)": FunctionFragment;
    "depositEther()": FunctionFragment;
    "findTicketInfosFromNo(uint256)": FunctionFragment;
    "getIthOwnedTicketNo(uint256,uint256)": FunctionFragment;
    "getIthWinningTicket(uint256,uint256)": FunctionFragment;
    "getLastOwnedTicketNo(uint256)": FunctionFragment;
    "getLotteryMoneyCollected(uint256)": FunctionFragment;
    "getMoneyCollected()": FunctionFragment;
    "getRandomNumber()": FunctionFragment;
    "getTicketInfo(uint256)": FunctionFragment;
    "getamount(uint8)": FunctionFragment;
    "withdrawEther(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balance"
      | "buyTicket"
      | "calculateSinglePriceValue"
      | "calculateTotalPriceValue"
      | "checkIfTicketWon"
      | "collectTicketPrize"
      | "collectTicketRefund"
      | "depositEther"
      | "findTicketInfosFromNo"
      | "getIthOwnedTicketNo"
      | "getIthWinningTicket"
      | "getLastOwnedTicketNo"
      | "getLotteryMoneyCollected"
      | "getMoneyCollected"
      | "getRandomNumber"
      | "getTicketInfo"
      | "getamount"
      | "withdrawEther"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSinglePriceValue",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTotalPriceValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfTicketWon",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectTicketPrize",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectTicketRefund",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEther",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "findTicketInfosFromNo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIthOwnedTicketNo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIthWinningTicket",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastOwnedTicketNo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteryMoneyCollected",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMoneyCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getamount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateSinglePriceValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalPriceValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfTicketWon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectTicketPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectTicketRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findTicketInfosFromNo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIthOwnedTicketNo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIthWinningTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastOwnedTicketNo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotteryMoneyCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMoneyCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getamount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;

  events: {
    "AmountOfPrize(string,uint256)": EventFragment;
    "TicketInfo(uint256,uint256,bytes32,uint256,uint8,bool,uint8)": EventFragment;
    "WinningTicket(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AmountOfPrize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinningTicket"): EventFragment;
}

export interface AmountOfPrizeEventObject {
  prizeName: string;
  prize: BigNumber;
}
export type AmountOfPrizeEvent = TypedEvent<
  [string, BigNumber],
  AmountOfPrizeEventObject
>;

export type AmountOfPrizeEventFilter = TypedEventFilter<AmountOfPrizeEvent>;

export interface TicketInfoEventObject {
  ticketNo: BigNumber;
  lotteryNo: BigNumber;
  ticketHash: string;
  ticketTimestamp: BigNumber;
  status: number;
  active: boolean;
  ticketTier: number;
}
export type TicketInfoEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, number, boolean, number],
  TicketInfoEventObject
>;

export type TicketInfoEventFilter = TypedEventFilter<TicketInfoEvent>;

export interface WinningTicketEventObject {
  ticketNo: BigNumber;
  amount: BigNumber;
}
export type WinningTicketEvent = TypedEvent<
  [BigNumber, BigNumber],
  WinningTicketEventObject
>;

export type WinningTicketEventFilter = TypedEventFilter<WinningTicketEvent>;

export interface FinalLottery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FinalLotteryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyTicket(
      hash_rnd_number: PromiseOrValue<BytesLike>,
      tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateSinglePriceValue(
      thPrice: PromiseOrValue<BigNumberish>,
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateTotalPriceValue(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkIfTicketWon(
      lottery_no: PromiseOrValue<BigNumberish>,
      ticket_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectTicketPrize(
      lottery_no: PromiseOrValue<BigNumberish>,
      ticket_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectTicketRefund(
      ticket_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositEther(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    findTicketInfosFromNo(
      ticket_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getIthOwnedTicketNo(
      i: PromiseOrValue<BigNumberish>,
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { status: number }>;

    getIthWinningTicket(
      i: PromiseOrValue<BigNumberish>,
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLastOwnedTicketNo(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    getLotteryMoneyCollected(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMoneyCollected(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getRandomNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTicketInfo(
      ticket_number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getamount(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balance(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyTicket(
    hash_rnd_number: PromiseOrValue<BytesLike>,
    tier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateSinglePriceValue(
    thPrice: PromiseOrValue<BigNumberish>,
    lottery_no: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateTotalPriceValue(
    lottery_no: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkIfTicketWon(
    lottery_no: PromiseOrValue<BigNumberish>,
    ticket_no: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectTicketPrize(
    lottery_no: PromiseOrValue<BigNumberish>,
    ticket_no: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectTicketRefund(
    ticket_no: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositEther(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  findTicketInfosFromNo(
    ticket_no: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getIthOwnedTicketNo(
    i: PromiseOrValue<BigNumberish>,
    lottery_no: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { status: number }>;

  getIthWinningTicket(
    i: PromiseOrValue<BigNumberish>,
    lottery_no: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLastOwnedTicketNo(
    lottery_no: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number]>;

  getLotteryMoneyCollected(
    lottery_no: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMoneyCollected(overrides?: CallOverrides): Promise<BigNumber>;

  getRandomNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getTicketInfo(
    ticket_number: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getamount(
    tier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawEther(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTicket(
      hash_rnd_number: PromiseOrValue<BytesLike>,
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateSinglePriceValue(
      thPrice: PromiseOrValue<BigNumberish>,
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    calculateTotalPriceValue(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkIfTicketWon(
      lottery_no: PromiseOrValue<BigNumberish>,
      ticket_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectTicketPrize(
      lottery_no: PromiseOrValue<BigNumberish>,
      ticket_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectTicketRefund(
      ticket_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositEther(overrides?: CallOverrides): Promise<void>;

    findTicketInfosFromNo(
      ticket_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getIthOwnedTicketNo(
      i: PromiseOrValue<BigNumberish>,
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { status: number }>;

    getIthWinningTicket(
      i: PromiseOrValue<BigNumberish>,
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { ticket_no: BigNumber; amount: BigNumber }
    >;

    getLastOwnedTicketNo(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    getLotteryMoneyCollected(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMoneyCollected(overrides?: CallOverrides): Promise<BigNumber>;

    getRandomNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getTicketInfo(
      ticket_number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getamount(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AmountOfPrize(string,uint256)"(
      prizeName?: null,
      prize?: null
    ): AmountOfPrizeEventFilter;
    AmountOfPrize(prizeName?: null, prize?: null): AmountOfPrizeEventFilter;

    "TicketInfo(uint256,uint256,bytes32,uint256,uint8,bool,uint8)"(
      ticketNo?: null,
      lotteryNo?: null,
      ticketHash?: null,
      ticketTimestamp?: null,
      status?: null,
      active?: null,
      ticketTier?: null
    ): TicketInfoEventFilter;
    TicketInfo(
      ticketNo?: null,
      lotteryNo?: null,
      ticketHash?: null,
      ticketTimestamp?: null,
      status?: null,
      active?: null,
      ticketTier?: null
    ): TicketInfoEventFilter;

    "WinningTicket(uint256,uint256)"(
      ticketNo?: null,
      amount?: null
    ): WinningTicketEventFilter;
    WinningTicket(ticketNo?: null, amount?: null): WinningTicketEventFilter;
  };

  estimateGas: {
    balance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTicket(
      hash_rnd_number: PromiseOrValue<BytesLike>,
      tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateSinglePriceValue(
      thPrice: PromiseOrValue<BigNumberish>,
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateTotalPriceValue(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkIfTicketWon(
      lottery_no: PromiseOrValue<BigNumberish>,
      ticket_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectTicketPrize(
      lottery_no: PromiseOrValue<BigNumberish>,
      ticket_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectTicketRefund(
      ticket_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositEther(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    findTicketInfosFromNo(
      ticket_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getIthOwnedTicketNo(
      i: PromiseOrValue<BigNumberish>,
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIthWinningTicket(
      i: PromiseOrValue<BigNumberish>,
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLastOwnedTicketNo(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLotteryMoneyCollected(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMoneyCollected(overrides?: CallOverrides): Promise<BigNumber>;

    getRandomNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getTicketInfo(
      ticket_number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getamount(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTicket(
      hash_rnd_number: PromiseOrValue<BytesLike>,
      tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateSinglePriceValue(
      thPrice: PromiseOrValue<BigNumberish>,
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateTotalPriceValue(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkIfTicketWon(
      lottery_no: PromiseOrValue<BigNumberish>,
      ticket_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectTicketPrize(
      lottery_no: PromiseOrValue<BigNumberish>,
      ticket_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectTicketRefund(
      ticket_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositEther(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    findTicketInfosFromNo(
      ticket_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getIthOwnedTicketNo(
      i: PromiseOrValue<BigNumberish>,
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIthWinningTicket(
      i: PromiseOrValue<BigNumberish>,
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLastOwnedTicketNo(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLotteryMoneyCollected(
      lottery_no: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMoneyCollected(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRandomNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTicketInfo(
      ticket_number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getamount(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
